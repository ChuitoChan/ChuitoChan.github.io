<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Chuito&#39;s code</title>
    <link>http://chuitochan.github.io/tags/golang/</link>
    <description>Recent content in Golang on Chuito&#39;s code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Aug 2015 16:52:56 +0800</lastBuildDate>
    <atom:link href="http://chuitochan.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2048 in Clojure</title>
      <link>http://chuitochan.github.io/post/2048-in-clojure/</link>
      <pubDate>Mon, 10 Aug 2015 16:52:56 +0800</pubDate>
      
      <guid>http://chuitochan.github.io/post/2048-in-clojure/</guid>
      <description>

&lt;p&gt;上一篇博文好像水过头了，这次得来点认真的了——用&lt;code&gt;Clojure&lt;/code&gt;写个&lt;a href=&#34;http://gabrielecirulli.github.io/2048/&#34;&gt;2048&lt;/a&gt;小游戏。由于是用&lt;code&gt;Clojure&lt;/code&gt;写的，相对于其他语言的各种&lt;code&gt;for&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;，可能会有点不同哦！&lt;/p&gt;

&lt;p&gt;不多说废话，开始吧~~~~~~~~~~~~~~~~~~~
&lt;br&gt;
&lt;br&gt;
首先用&lt;code&gt;vector&lt;/code&gt;定义一个空面板（用0表示空格子）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(def blank-board
  (vec (repeat 4 (vec (repeat 4 0)))))
 
blank-board
;=&amp;gt; [[0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用&lt;code&gt;sorted-map&lt;/code&gt;定义一下划动的方向，不同方向对应不同的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(def directions (sorted-map :left 0 :down 1 :right 2 :up 3))
directions
;=&amp;gt; {:down 1, :left 0, :right 2, :up 3}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;填格子:fbce43adeb5f9117deccb9fa41206555&#34;&gt;填格子：&lt;/h4&gt;

&lt;p&gt;1.找出所有空着的格子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn blanks [board]
  (for [x (range 4)
        y (range 4)
        :when (zero? (get-in board [x y]))]
    [x y]))

(blanks [[2 4 4 8] [8 16 0 8] [2 2 4 2] [0 2 4 4]])
;=&amp;gt; ([1 2] [3 0])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.随机给一个空格子填入2或4（概率分别为P(2)=0.9，P(4)=0.1）:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn add-tile [board]
  (let [elem (rand-nth [2 2 2 2 4 2 2 2 2 2])
        pos  (rand-nth (blanks board))]
    (assoc-in board pos elem)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将面板打印出来，并且返回面板：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn print-board [board]
  (do
    (doseq [x (range 4)]
      (doseq [y (range 4)]
        (printf &amp;quot;%8d&amp;quot; (get-in board [x y])))
      (println))
    (println &amp;quot;--------------------------------&amp;quot;)
    board))

(print-board (add-tile blank-board))
;=&amp;gt;        0       0       0       0
;=&amp;gt;        0       0       0       0
;=&amp;gt;        0       2       0       0
;=&amp;gt;        0       0       0       0
;=&amp;gt; --------------------------------
;=&amp;gt; [[0 0 0 0] [0 0 0 0] [0 2 0 0] [0 0 0 0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;划动:fbce43adeb5f9117deccb9fa41206555&#34;&gt;划动&lt;/h4&gt;

&lt;p&gt;1.先考虑一行里格子的碰撞合并，思路是先去掉空格子，再将相邻值相等的格子分在一块，再将每个格子块分割成两个一组，最后将每组的数（两个或一个）分别加起来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn add-pairs [row]
  (-&amp;gt;&amp;gt; row
       (remove zero?)
       (partition-by identity)
       (mapcat #(partition-all 2 %))
       (map #(apply + %))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.补充空格子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn padding [row]
  (take 4 (concat row (repeat 0))))
  
(padding (add-pairs [4 4 0 8]))
;=&amp;gt; (8 8 0 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.上面两个操作针对的是左划，那么其他方向的划动怎么实现呢？这个有点巧妙：譬如我们要向下划动，我们可以先将面板顺时针旋转&lt;code&gt;90°&lt;/code&gt;，这样方向向下的列就变成方向向左的行，然后就可以用上面的&lt;code&gt;add-pairs&lt;/code&gt;和&lt;code&gt;padding&lt;/code&gt;对每一行进行处理，处理完之后再逆时针旋转回来就是了（实际是顺时针转多&lt;code&gt;270°&lt;/code&gt;）。所以前面&lt;code&gt;directions&lt;/code&gt;里面划动方向对应的值其实就是它要顺时针旋转原面板90度的次数。这样剩下的问题就是怎么实现旋转一个面板了，这也很简单：先将原面板的行颠倒一下顺序，然后对面板转置，就能得到旋转后的面板。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn rotate [board]
  (apply mapv vector (reverse board)))

(defn rotate-board [n board]
  (nth (iterate rotate board) n))

(print-board [[0 1 2 3] [4 5 6 7] [8 9 10 11] [12 13 14 15]])
;=&amp;gt;        0       1       2       3
;=&amp;gt;        4       5       6       7
;=&amp;gt;        8       9      10      11
;=&amp;gt;       12      13      14      15
;=&amp;gt; --------------------------------
(print-board (rotate [[0 1 2 3] [4 5 6 7] [8 9 10 11] [12 13 14 15]]))
;=&amp;gt;       12       8       4       0
;=&amp;gt;       13       9       5       1
;=&amp;gt;       14      10       6       2
;=&amp;gt;       15      11       7       3
;=&amp;gt; --------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.最后定义一个&lt;code&gt;move&lt;/code&gt;实现整个划动操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn move [board dir]
  (-&amp;gt;&amp;gt; board
       (rotate-board (directions dir))
       (map add-pairs)
       (map padding)
       (rotate-board (- 4 (directions dir)))))

(def board [[2 4 4 8] [8 16 0 8] [2 2 4 2] [0 2 4 4]])
(print-board board)
;=&amp;gt;       2       4       4       8
;=&amp;gt;       8      16       0       8
;=&amp;gt;       2       2       4       2
;=&amp;gt;       0       2       4       4
;=&amp;gt; --------------------------------
(print-board (move board :right))
;=&amp;gt;        0       2       8       8
;=&amp;gt;        0       8      16       8
;=&amp;gt;        0       4       4       2
;=&amp;gt;        0       0       2       8
;=&amp;gt; --------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;游戏控制:fbce43adeb5f9117deccb9fa41206555&#34;&gt;游戏控制&lt;/h4&gt;

&lt;p&gt;1.初始化：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn init-game []
  (-&amp;gt; blank-board
      add-tile
      add-tile))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.判断是否game over（也就是哪个方向都动不了）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn noop? [board dir]
  (= board (move board dir)))
  
(defn gameover? [board]
  (every? (partial noop? board) (keys directions)))
  
(gameover? [[2 4 8 16] [16 8 4 2] [2 4 8 16] [16 8 4 2]])
;=&amp;gt; true
(gameover? [[2 2 8 16] [16 8 4 2] [2 4 8 16] [16 8 4 2]])
;=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.一轮操作的过程：如果划动之后的面板和原来一样，则不填入新的格子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn play [board dir]
  (-&amp;gt; board
      (move dir)
      (as-&amp;gt; new-board
            (if (= board new-board)
              new-board
              (add-tile new-board)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.整个游戏的运行：定义一个&lt;code&gt;auto-play&lt;/code&gt;函数接收2个参数：原面板&lt;code&gt;board&lt;/code&gt;和函数&lt;code&gt;player&lt;/code&gt;，先用&lt;code&gt;player&lt;/code&gt;根据原面板返回一个划动方向&lt;code&gt;dir&lt;/code&gt;（并且将它显示出来），进行一轮游戏，产生新面板&lt;code&gt;res&lt;/code&gt;，将新面板打印出来，如果游戏没有结束，就用新面板尾递归回去&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn auto-play [board player]
  (let [dir (player board)
        _   (prn dir)
        res (play board dir)]
    (print-board res)
    (if (gameover? res)
      (println &amp;quot;Game over!&amp;quot;)
      (recur res player))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，基本上一个2048的游戏核心就出来啦！！！撒花，撒花~~~~~&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以为这样就结束了吗？呵呵！滚动条还有一半呢，请放心食用！！！
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-我是不要脸的分割线&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
&lt;br&gt;
&lt;br&gt;
光写个游戏出来太简单了，感觉还不够好玩，身为一名技术宅，不仅能写游戏，还得会玩游戏，不好意思，俺要开个挂~~~~~~~~~~~~~~~~
&lt;br&gt;
虽然我之前玩2048经常傻逼，但是我可以写个没那么逗逼的小&lt;code&gt;AI&lt;/code&gt;帮我去玩啊！于是我就决定写个2048小AI（给自己挖个坑）。︿(￣︶￣)︿
&lt;br&gt;
然后就找到了这篇&lt;a href=&#34;http://blog.codinglabs.org/articles/2048-ai-analysis.html&#34;&gt;2048-AI算法分析&lt;/a&gt;，学了下如何用&lt;a href=&#34;https://en.wikipedia.org/wiki/Minimax&#34;&gt;Minimax&lt;/a&gt;（也就是极小化极大算法）和&lt;a href=&#34;https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning&#34;&gt;Alpha-beta剪枝&lt;/a&gt;实现2048-AI。还发现了&lt;code&gt;stackoverflow&lt;/code&gt;上两位大神关于&lt;a href=&#34;http://stackoverflow.com/questions/22342854/what-is-the-optimal-algorithm-for-the-game-2048&#34;&gt;What is the optimal algorithm for the game 2048?&lt;/a&gt;的回答。然后我就去找两位大神的源码来研究研究。&lt;a href=&#34;https://github.com/ov3y/2048-AI&#34;&gt;ovolve&lt;/a&gt;大神的AI是基于&lt;a href=&#34;https://en.wikipedia.org/wiki/Minimax&#34;&gt;Minimax&lt;/a&gt;和&lt;a href=&#34;https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning&#34;&gt;Alpha-beta剪枝&lt;/a&gt;算法用&lt;code&gt;javascript&lt;/code&gt;实现的，而&lt;a href=&#34;https://github.com/nneonneo/2048-ai&#34;&gt;nneonneo&lt;/a&gt;大神的AI是基于&lt;a href=&#34;https://en.wikipedia.org/wiki/Expectiminimax_tree&#34;&gt;Expectimax&lt;/a&gt;算法用&lt;code&gt;C++&lt;/code&gt;实现的。但是这种两种语言我都没学过啊，只能根据代码去大概揣测真正的意图。但是大神就是大神，各种高级的编程技巧，岂是我这渣渣所能领悟的呢？重要的是我还得转化成&lt;code&gt;Clojure&lt;/code&gt;来实现呀，各种蛋疼有木有ლ(°Д°ლ)
&lt;br&gt;
大神们关于启发函数考虑了不少评判因素，比如空格子的个数，单调性，平整度，最大值等等。但是我只是个初学编程的战五渣呀，不要求像&lt;code&gt;nneonneo&lt;/code&gt;大神那样&lt;code&gt;100%&lt;/code&gt;能达到&lt;code&gt;8192&lt;/code&gt;，只要有较大机率获得&lt;code&gt;2048&lt;/code&gt;就心满意足了( ´•︵•` )。 所以。。。我就没有用大神的启发函数。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;建模:fbce43adeb5f9117deccb9fa41206555&#34;&gt;建模&lt;/h4&gt;

&lt;p&gt;这里引用&lt;a href=&#34;http://blog.codinglabs.org/articles/2048-ai-analysis.html&#34;&gt;2048-AI算法分析&lt;/a&gt;的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我方：游戏玩家。每次可以选择上、下、左、右四个行棋策略中的一种（某些格局会少于四种，因为有些方向不可走）行棋后方块按照既定逻辑移动及合并，格局转换完成。&lt;/li&gt;
&lt;li&gt;对方：计算机。在当前任意空格子里放置一个方块，方块的数值可以是2或4。放置新方块后，格局转换完成。&lt;/li&gt;
&lt;li&gt;胜利条件：出现某个方块的数值为“2048”。&lt;/li&gt;
&lt;li&gt;失败条件：格子全满，且无法向四个方向中任何一个方向移动（均不能触发合并）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;格局评价:fbce43adeb5f9117deccb9fa41206555&#34;&gt;格局评价&lt;/h4&gt;

&lt;p&gt;我并没有像大神那样采用那么多指标，而是采用我之前玩2048的思路。大家玩过都知道最方便合并的格局就是将最大那个数保持在角落，并且沿S形路线单调递减，也就是下面两个图那样（以左上角为例）。
&lt;br&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://chuitochan.github.io/media/2048_row.png&#34; alt=&#34;横向S形路线&#34; width=&#34;300&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;横向S形路线&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://chuitochan.github.io/media/2048_col.png&#34; width=&#34;300&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;纵向S形路线&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

Example output
&lt;br&gt;
为了让格子随着S路线单调递减，将评价函数定义为S路线上的格子与一个等比数列（公比&lt;code&gt;0 &amp;lt; r &amp;lt; 1&lt;/code&gt;）的点乘。
&lt;br&gt;
            $$p&lt;em&gt;{n} \in Path&lt;/em&gt;{0&amp;hellip;7}$$，
$$score = \sum&lt;em&gt;{n=0}^{7}value(p&lt;/em&gt;{n}) \times r^{n}$$&lt;/p&gt;

&lt;p&gt;在电脑回合，由于电脑填入格子后，评价函数的值肯定是增加的，因此这个时候的评价会有所不同。回想玩游戏时候的情况，最蛋疼的应该是在那条单调递减路线中间被电脑突然强插了一个“2”，破坏了整体的单调性。所以我将电脑回合的操作统一定为在评价分数最高的那条路线上找到最靠前的空格子并且插入一个“2”。这样做还省去了不少电脑回合对评价函数的计算。
&lt;br&gt;
在玩家回合，我并没有像&lt;code&gt;Minimax&lt;/code&gt;那样，搜索树的节点取其子节点的最大值。因为实际运行过程中，我发现会有&lt;code&gt;过度悲观&lt;/code&gt;的问题。当我们处于较好的格局时，经过几次假设的最坏情况后，那些一开始有利于维持良好格局的方向形成的叶子，可能会不如那些一开始就破坏良好格局的方向形成的叶子，因此如果只考虑搜索树的叶子的最大值的话就会得出最优方案是那些一开始会破坏良好格局的方向。但是不同于真正的博弈，电脑对空格子的填入并不是理性的，而是随机的，连续发生几次最坏情况的机率是很低的。为了避免那发生机率很低的最最最坏情况而打破原来的良好格局，是很不划算的。所以我在决定那个方向是最优方向时，考虑的是整个搜索的态势，叶子的启发函数得分就是其评价分数，而节点的启发函数得分则是其子节点的最大启发函数得分乘以一定比值&lt;code&gt;h&lt;/code&gt;（&lt;code&gt;h&amp;gt;1&lt;/code&gt;，因为最坏情况下得到的高分更有价值）再加上该节点本身的评价分数。因此最后4个方向得到的分数是从各自方向向下搜索的每层加起来的总体反映。而且搜索到的层数越多，得分越高。&lt;/p&gt;

&lt;h4 id=&#34;实现:fbce43adeb5f9117deccb9fa41206555&#34;&gt;实现&lt;/h4&gt;

&lt;p&gt;1.先定义等比数列，以0.25为公比：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(def coefs (take 16 (iterate #(* 0.25 %) 1)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.对面板上每个格子将其值和坐标保存到一个map里面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn val-pos [board]
  (for [row (range 4)]
    (for [col (range 4)]
      {:value (get-in board [row col]) :pos [row col]})))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.以左上角为例，定义&lt;code&gt;row-path&lt;/code&gt;和&lt;code&gt;col-path&lt;/code&gt;分别求横向和纵向的S形路线。其他边角的S形路线可利用之前定义&lt;code&gt;rotate&lt;/code&gt;函数先旋转面板，再用&lt;code&gt;row-path&lt;/code&gt;和&lt;code&gt;col-path&lt;/code&gt;求得&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn row-path [board]
  (concat (first board) (reverse (second board))
          (last (butlast board)) (reverse (last board))))

(defn col-path [board]
  (let [rev-board (apply mapv vector board)]
    (row-path rev-board)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.求最高评价分数与待填空格子（也就是影响单调性最大的格子）的坐标&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn calculate [path]
  (reduce + (map * (map :value path) coefs)))

(defn critical-blank [path]
  (:pos (first (filter (comp zero? :value) path))))
  
(defn evaluate [board]
  (let [v-p-board (val-pos board)
        boards    (take 4 (iterate rotate v-p-board))
        paths     (concat (map row-path boards) (map col-path boards))
        best-path (last (sort-by calculate paths))]
    {:score (calculate best-path) :pos (critical-blank best-path)}))
    
(evaluate [[2 0 8 16] [0 0 0 0] [0 0 0 0] [0 0 0 0]])
;=&amp;gt; {:score 18.03125, :pos [0 1]}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;calculate&lt;/code&gt;计算一条路线的评价分数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;critical-blank&lt;/code&gt;找出路径上最靠前的空格子的坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evaluate&lt;/code&gt;找出面板中评价分数最高的那一条路线，并返回该路线关于评价分数和待填入空格子坐标的map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.接下来是最长，最复杂的一个函数——&lt;code&gt;next-move&lt;/code&gt;，用来决定下一步的划动方向。它接收3个参数：原面板&lt;code&gt;board&lt;/code&gt;、当前搜索深度&lt;code&gt;depth&lt;/code&gt;和最大搜索深度&lt;code&gt;max-depth&lt;/code&gt;，返回一个关于最优划动方向，该划动方向的分数和划动该方向后对单调性影响最大的空格子坐标的map。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn next-move [board depth max-depth]
  (let [dirs (remove #(noop? board %) (keys directions))]
    (if (empty? dirs)
      {:dir :left :score 0 :pos [0 0]}
      (if (zero? depth)
        (-&amp;gt;&amp;gt; dirs
             (map #(move board %))
             (map evaluate)
             (map #(assoc %2 :dir %1) dirs)
             (sort-by :score)
             last)
        (let [boards     (map #(move board %) dirs)
              scores-pos (map evaluate boards)
              scores     (map :score scores-pos)
              pos        (map :pos scores-pos)
              new-boards (map #(assoc-in %1 %2 2) boards pos)]
          (-&amp;gt;&amp;gt; new-boards
               (map #(next-move % (dec depth) max-depth))
               (map #(+ %1 (* (:score %2) 
                              (Math/pow 1.1 (+ (- max-depth depth) 1))))
                    scores)
               (map #(hash-map :pos %1 :score %2) pos)
               (map #(assoc %2 :dir %1) dirs)
               (sort-by :score)
               last))))))
               
(next-move [[2 0 8 16] [0 0 0 0] [0 0 0 0] [0 0 0 0]] 3 3)
;=&amp;gt; {:dir :right, :pos [0 0], :score 97.93813777070267}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;先获取有效的划动方向&lt;/li&gt;
&lt;li&gt;如果没有有效的划动方向，则默认返回分数为0,划动方向向左，空格子坐标为[0 0]（划动方向和格子坐标并不重要）&lt;/li&gt;
&lt;li&gt;如果搜索深度为0，则对原面板分别进行每个有效的划动操作，计算对应的分数和影响单调性最大的空格子的坐标，转换成对应的map,最后排序，返回分数最高的那一个map&lt;/li&gt;
&lt;li&gt;如果搜索深度不为0，则先对原面板分别进行每个有效的划动操作得到&lt;code&gt;boards&lt;/code&gt;，再计算对应的评价分数和影响单调性最大的空格子的坐标得到&lt;code&gt;scores-pos&lt;/code&gt;，分别将评价分数和空格子坐标保存为&lt;code&gt;scores&lt;/code&gt;和&lt;code&gt;pos&lt;/code&gt;。对&lt;code&gt;boards&lt;/code&gt;分别在对应的&lt;code&gt;pos&lt;/code&gt;位置上填入“2”得到&lt;code&gt;new-boards&lt;/code&gt;。对&lt;code&gt;new-boards&lt;/code&gt;里的每个面板调用深度减1的&lt;code&gt;next-move&lt;/code&gt;，返回对应的包含最优划动方向和评价分数的map。再提取出评价分数，乘以1.1（因为我还没想到这个比值h应该怎么取才合适，所以随便扔个数进去试试先）再，与&lt;code&gt;scores&lt;/code&gt;里未填入“2”时的评价分数相加得到新的评价分数。最后就是排序，返回分数最高的那一个map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6.最后定义一个&lt;code&gt;ai-player&lt;/code&gt;返回特定搜索深度（如3）的最优划动方向。以及一个&lt;code&gt;-main&lt;/code&gt;函数运行游戏。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn ai-player [board]
  (:dir (next-move board 3 3)))

(defn -main []
  (auto-play (init-game) ai-player))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行一下&lt;code&gt;-main&lt;/code&gt;，那些面板就“啾，啾。。。”地在我面前刷过，在168秒之后跑出了这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    4       2     512       4
  256      16    1024       2
  128      64      32       8
    4       8       4    2048
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
感动得泪流满面啊`(T﹏T)′&lt;/p&gt;

&lt;p&gt;为了再验证下效果，再跑了100遍，结果如下。93%的成功率还算不错&amp;lt;(‾︶‾)&amp;gt;&lt;br&gt;
要是能跑个&lt;code&gt;16384&lt;/code&gt;出来就更好了！(づ￣ 3￣)づ
&lt;br&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://chuitochan.github.io/media/2048_chart.png&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;总结:fbce43adeb5f9117deccb9fa41206555&#34;&gt;总结&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;函数式是不是很简洁呢？游戏核心部分就那几个函数，加起来也不过80行。我一开始也试着用&lt;code&gt;Python&lt;/code&gt;来写，&lt;code&gt;Python&lt;/code&gt;的列表解析用着也很爽，但是感觉有时候还是不够&lt;code&gt;Clojure&lt;/code&gt;爽。&lt;/li&gt;
&lt;li&gt;那个AI真的是个坑，那些参数还要优化，而且想突破&lt;code&gt;16384&lt;/code&gt;的话看来还得用&lt;code&gt;Minimax&lt;/code&gt;或&lt;code&gt;Expectiminimax&lt;/code&gt;。嗯，等有空才填吧。。。（很有可能会跳票）→_→&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;code:fbce43adeb5f9117deccb9fa41206555&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;The code can be found on GitHub at the following link &lt;a href=&#34;https://github.com/ChuitoChan/clojure-2048ai&#34;&gt;https://github.com/ChuitoChan/clojure-2048ai&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quicksort in clojure</title>
      <link>http://chuitochan.github.io/post/quicksort-in-clojure/</link>
      <pubDate>Sun, 26 Jul 2015 16:04:30 +0800</pubDate>
      
      <guid>http://chuitochan.github.io/post/quicksort-in-clojure/</guid>
      <description>&lt;p&gt;最近在学习&lt;em&gt;Robert Sedgewick&lt;/em&gt; 老头子的《算法》红宝书，刚好看到&lt;code&gt;Sorting&lt;/code&gt;那一部分。各种有趣的排序算法，真是大开眼界，其中最NB的要算&lt;em&gt;Quicksort&lt;/em&gt; 了。书里的算法都是用&lt;code&gt;Java&lt;/code&gt;实现的，但是&lt;code&gt;Java&lt;/code&gt;写多了，真的有点无聊（而且手累），所以我就尝试用&lt;code&gt;Clojure&lt;/code&gt;来实现一下&lt;em&gt;Quicksort&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quicksort&lt;/em&gt; 的基本思路就是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在序列中找一个数作为基准(&lt;em&gt;pivot&lt;/em&gt; )（暂时取第一个数吧）&lt;/li&gt;
&lt;li&gt;对序列进行分区操作，将比这个基准大的数都放到它的右边，将小于或等于它的数都放到&lt;br&gt;
　它的左边（这个过程实际上就已经将作为基准的数放到了其排序后的正确位置）&lt;/li&gt;
&lt;li&gt;再对左右区间重复上一步，直到各区只有一个数，这样整个序列就排好啰~~~&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在&lt;code&gt;Clojure&lt;/code&gt;里面，函数&lt;code&gt;filter&lt;/code&gt;和&lt;code&gt;remove&lt;/code&gt;可以用来筛选出一个序列里面我们想要的数（大于基准的数和不大于基准的数）。所以&lt;em&gt;Quicksort&lt;/em&gt; 在&lt;code&gt;Clojure&lt;/code&gt;里可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn qsort [[pivot &amp;amp; xs]]
  (when pivot
    (let [smaller? #(&amp;lt; % pivot)]
      (lazy-cat (qsort (filter smaller? xs))
                [pivot]
                (qsort (remove smaller? xs))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[[pivot &amp;amp; xs]]&lt;/code&gt;对参数进行解构(destructuring)，即将序列的第一个数bind给&lt;em&gt;pivot&lt;/em&gt; ，&lt;br&gt;
　剩余部分bind给&lt;em&gt;xs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smaller?&lt;/code&gt;是由匿名函数&lt;code&gt;#(&amp;lt; % pivot)&lt;/code&gt;定义的一个判断参数是否小于基准的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lazy-cat&lt;/code&gt;是用来惰性地拼接两个筛选出来并排好序的子序列
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同样也可以用&lt;code&gt;for&lt;/code&gt;宏来实现&lt;code&gt;filter&lt;/code&gt;和&lt;code&gt;remove&lt;/code&gt;的功能：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn qsort [[pivot &amp;amp; xs]]
  (when pivot
    (lazy-cat (qsort (for [x xs :when (&amp;lt; x pivot)] x))
              [pivot]
              (qsort (for [x xs :when (&amp;gt;= x pivot)] x)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以用&lt;code&gt;quasiquote(`)&lt;/code&gt;来拼接两个子序列：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn qsort [[pivot &amp;amp; xs]]
  (when pivot
    `(~@(qsort (filter #(&amp;gt; % pivot) xs))
      ~pivot
      ~@(qsort (remove #(&amp;gt; % pivot) xs)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;这样写感觉有点逼格，但是呢，速度实在不如前面两种写法→_→
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Quicksort&lt;/em&gt; 有一种升级版叫&lt;em&gt;3-way-Quicksort&lt;/em&gt; ，它在序列中重复的数比较多时食用更佳哦！它的思想和普通&lt;em&gt;Quicksort&lt;/em&gt; 差不多，只是它分区的时候不止分左右两个区，而是同时筛选出与基准相等的数，并放在中间，这样就可以一次过将所有与基准相等的数放到它们排序后的正确位置，而不是每次只能排好一个数。接下来就是用同样的方法递归地去排列左右两个区啦。实现起来也很简单，只需在原来的基础上加多一行代码来筛选出与基准相等的数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn three-way-qsort [[pivot :as xs]]
  (when pivot
    (lazy-cat (three-way-qsort (filter #(&amp;lt; % pivot) xs))
              (filter #{pivot} xs)
              (three-way-qsort (filter #(&amp;gt; % pivot) xs)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;Clojure&lt;/code&gt;里面，&lt;code&gt;set&lt;/code&gt;是可以当函数的哦！(๑•̀ㅂ•́)و✧&lt;br&gt;&lt;/li&gt;
&lt;li&gt;所以可以直接用一个&lt;code&gt;set&lt;/code&gt;，即&lt;code&gt;#{pivot}&lt;/code&gt;作为判断一个数是否与&lt;code&gt;pivot&lt;/code&gt;相等的函数
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，可以将&lt;code&gt;qsort&lt;/code&gt;定义为接收一个&lt;code&gt;pred&lt;/code&gt;参数，返回一个以&lt;code&gt;pred&lt;/code&gt;作为比较函数的&lt;code&gt;Quicksort&lt;/code&gt;函数，从而实现不同的排序方式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;; Quicksort
(defn qsort [pred]
  (fn qsort-help [[pivot &amp;amp; xs]]
    (when pivot
    (lazy-cat (qsort-help (filter #(pred % pivot) xs))
              [pivot]
              (qsort-help (remove #(pred % pivot) xs))))))
              
;; ascending order
(def ascending-quicksort (qsort &amp;lt;))
;; descending order
(def descending-quicksort (qsort &amp;gt;))
(def coll [9 6 5 4 9 0 4 8 6 2])
(ascending-quicksort coll)
;=&amp;gt; (0 2 4 4 5 6 6 8 9 9)
(descending-quicksort coll)
;=&amp;gt; (9 9 8 6 6 5 4 4 2 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以给&lt;code&gt;qsort&lt;/code&gt;函数再增加一个参数&lt;code&gt;pred&lt;/code&gt;作为比较的函数，当没有传入&lt;code&gt;pred&lt;/code&gt;时，默认按升序排列。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;; Quicksort
(defn qsort
  ([coll] (qsort coll &amp;lt;))
  ([[pivot &amp;amp; xs] pred]
    (when pivot
      (lazy-cat (qsort (filter #(pred % pivot) xs) pred)
                [pivot]
                (qsort (remove #(pred % pivot) xs) pred)))))
                
;; ascending order
(qsort coll)
;=&amp;gt; (0 2 4 4 5 6 6 8 9 9)
;; descending order
(qsort coll &amp;gt;)
;=&amp;gt; (9 9 8 6 6 5 4 4 2 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;好了，就这样，就这样水了一篇啦&amp;lt;(‾︶‾)&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>http://chuitochan.github.io/post/hello-world/</link>
      <pubDate>Sun, 26 Jul 2015 15:46:30 +0800</pubDate>
      
      <guid>http://chuitochan.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;好久好久好久之前就想搞个Blog玩玩，但是现实向来是残酷的嘛。。。经历各种艰辛之后呢，我的Blog终于诞生啦！！！(其实是因为我懒。。。)&lt;br&gt;&lt;/p&gt;

&lt;p&gt;哈哈！哈哈！我现在是有Blog的程序猿啦~~~~~~~~~~~~~~~~&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://chuitochan.github.io/media/hello-world.jpg&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>